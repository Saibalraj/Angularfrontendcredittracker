// import { Component } from '@angular/core';

// @Component({
//   selector: 'app-courses',
//   imports: [],
//   templateUrl: './courses.html',
//   styleUrl: './courses.css'
// })
// export class Courses {

// }

// src/app/courses/courses.component.ts




// // .....................................
// import { Component, OnInit } from '@angular/core';
// import { CourseService } from '../services/course.service';
// import { Course } from '../models/course.model';

// @Component({
//   selector: 'app-courses',
//   templateUrl: './courses.component.html',
//   styleUrls: ['./courses.component.css']
// })
// export class CoursesComponent implements OnInit {
//   courses: Course[] = [];
//   isLoading: boolean = true;
//   errorMessage: string | null = null;

//   // Assuming CourseService and Course model are created as previously discussed
//   constructor(private courseService: CourseService) { } 

//   ngOnInit(): void {
//     this.loadCourses();
//   }

//   loadCourses(): void {
//     this.isLoading = true;
//     this.errorMessage = null;

//     // Use the service to fetch data from the backend
//     this.courseService.getAllCourses().subscribe({
//       next: (data) => {
//         this.courses = data;
//         this.isLoading = false;
//       },
//       error: (err) => {
//         console.error('Error fetching courses:', err);
//         this.errorMessage = 'Failed to load courses. Please check the backend service.';
//         this.isLoading = false;
//       }
//     });
//   }

//   // Placeholder function for future delete functionality
//   deleteCourse(id: number | undefined): void {
//     if (id && confirm('Are you sure you want to delete this course?')) {
//       // NOTE: Using a stubbed delete functionality here
//       console.log('Attempting to delete course with ID:', id);
      
//       // In a real app, you would call:
//       /*
//       this.courseService.delete








// src/app/models/course.model.ts




// export interface Course {
//   id?: number; // Optional since it's auto-generated by the backend
//   courseName: string;
//   courseCode: string;
//   credits: number;
// }